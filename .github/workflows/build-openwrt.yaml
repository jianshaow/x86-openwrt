name: Build OpenWrt
on:
  workflow_dispatch:
    inputs:
      package:
        description: "archive packages or not"
        required: false
        default: "yes"
      firmware:
        description: "build firmware or not"
        required: false
        default: "yes"
      release:
        description: "upload to release or not"
        required: false
        default: "no"
env:
  OP_REPO: jianshaow/lede
  OP_REPO_BRANCH: master
  BUILD_REPO_PATH: ${{ github.workspace }}/build
  OP_REPO_PATH: ${{ github.workspace }}/lede
  ARTIFACT_PATH: ${{ github.workspace }}/artifact
  BEFORE_FEED_SH: before-feed.sh
  BEFORE_CONFIG_SH: before-config.sh
  TZ: Asia/Shanghai
jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - name: Prepare environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q` > /dev/null
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* android*
        sudo -E apt-get -y update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        df -h
        sudo timedatectl set-timezone "$TZ"
        curl https://goproxy.io -o /dev/null
    - name: Checkout build script
      uses: actions/checkout@v3
      with:
        path: ${{ env.BUILD_REPO_PATH }}
    - name: Checkout op sources
      uses: actions/checkout@v3
      with:
        repository: ${{ env.OP_REPO }}
        ref: ${{ env.OP_REPO_BRANCH }}
        path: ${{ env.OP_REPO_PATH }}
    - name: Update feeds
      working-directory: ${{ env.OP_REPO_PATH }}
      run: |
        $BUILD_REPO_PATH/$BEFORE_FEED_SH
        scripts/feeds update -a
        scripts/feeds install -a
    - name: Generate configuration file
      working-directory: ${{ env.OP_REPO_PATH }}
      run: |
        cp $BUILD_REPO_PATH/.config ./
        ls -lrta
        $BUILD_REPO_PATH/$BEFORE_CONFIG_SH
        make defconfig
    - name: Make download
      working-directory: ${{ env.OP_REPO_PATH }}
      run: |
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    - name: Compile firmware
      working-directory: ${{ env.OP_REPO_PATH }}
      run: |
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "======================="
        echo "Space usage:"
        echo "======================="
        df -h
        echo "======================="
        du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
        du -h --max-depth=1 ./build_dir
        du -h --max-depth=1 ./bin
    - name: Prepare build info artifact
      working-directory: ${{ env.OP_REPO_PATH }}
      run: |
        rm -rf $(find ./bin/targets/ -type d -name "packages")
        mkdir -p $ARTIFACT_PATH/buildinfo
        cp .config feeds.conf.default $ARTIFACT_PATH/buildinfo/
        cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") $ARTIFACT_PATH/buildinfo/
    - name: Prepare packages artifact
      if: github.event.inputs.package == 'yes'
      working-directory: ${{ env.OP_REPO_PATH }}
      run: |
        mkdir -p $ARTIFACT_PATH/package
        cp -rf $(find bin/packages/ -type f -name "*.ipk") $ARTIFACT_PATH/package/
    - name: Prepare firmwares artifact
      if: github.event.inputs.firmware != 'yes'
      working-directory: ${{ env.OP_REPO_PATH }}
      run: |
        mkdir -p $ARTIFACT_PATH/firmware
        cp -rf $(find ./bin/targets/ -type f -name "*.tar.gz") $ARTIFACT_PATH/firmware/
    - name: Upload artifact directory
      uses: actions/upload-artifact@v3
      with:
        name: OpenWrt_Artifact-${{ env.PACKAGED_OUTPUTDATE }}
        path: ${{ env.ARTIFACT_PATH }}
